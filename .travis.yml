sudo: required	

services:
- docker

language: node_js

cache:
  directories:
  - $HOME/google-cloud-sdk/

env:
- GAE_PYTHONPATH=${HOME}/.cache/google_appengine PATH=$PATH:${HOME}/google-cloud-sdk/bin
  PYTHONPATH=${PYTHONPATH}:${GAE_PYTHONPATH} CLOUDSDK_CORE_DISABLE_PROMPTS=1 GCLOUD_PROJECT_NAME=silent-presence-117620
  CLOUDSDK_CORE_PROJECT=silent-presence-117620 CONTAINER_CLUSTER=dom-example-cluster CLOUDSDK_COMPUTE_ZONE=us-central1-b 
  GCLOUD_EMAIL=continuous-integration-test-tr@silent-presence-117620.iam.gserviceaccount.com
  GOOGLE_APPLICATION_CREDENTIALS=client-secret.json
  VERSION_MASTER=${VERSION_MASTER:=undefined}
  VERSION_MNINOR=${VERSION_MINOR:=undefined}
  CONTAINER_NAME=hello-world-deployment
  CONTAINER_APP_LABEL=hello-world
  CONTAINER_IMAGE_RESOURCE_TYPE="deployment"

before_install:
#- env # albeit convenient, shows encrypted vars too
# To deBug: better to list key variables
- for var in VERSION_MASTER VERSION_MINOR TRAVIS_BUILD_NUMBER TRAVIS_BRANCH TRAVIS_REPO_SLUG ; do eval echo $var=\$$var; done
# for Master branch, ensure that Major and Minor numbers are defined
- if [[ $TRAVIS_BRANCH == "master" && ($VERSION_MASTER||$VERSION_MASTER == "undefined"||$VERSION_MINOR||$VERSION_MINOR != "undefined")]]; then echo "Houston, we have a problem! Cannot launch deployment";exit 1; fi
# * TODO: check for more like above condidtion ... for now assume things are sane
#
- cd containerengine/hello-world
- openssl aes-256-cbc -K $encrypted_0fc78259f5c7_key -iv $encrypted_0fc78259f5c7_iv
  -in credentials.tar.gz.enc -out credentials.tar.gz -d
- if [ ! -d "$HOME/google-cloud-sdk/bin" ]; then rm -rf $HOME/google-cloud-sdk; curl https://sdk.cloud.google.com | bash; fi
# Add gcloud to $PATH
- source /home/travis/google-cloud-sdk/path.bash.inc
- ssh-keygen -q -N "" -f ~/.ssh/google_compute_engine
- gcloud --version
- gcloud config list
- gcloud config set disable_usage_reporting true

install:
- gcloud --quiet components update kubectl
- tar -xzf credentials.tar.gz
- mkdir -p lib
- gcloud auth activate-service-account $GCLOUD_EMAIL --key-file $GOOGLE_APPLICATION_CREDENTIALS
- gcloud config set project $GCLOUD_PROJECT_NAME
- gcloud config set compute/zone $CLOUDSDK_COMPUTE_ZONE

script:
# * TODO: Need to ensure TRAVIS_BRANCH has no spaces and valid characters
# Requirements: https://gist.github.com/domnorth/aca09db77820cbd8dd0fb50cb872b757
#
- shopt -s nocasematch # insensitive case matching, to compare two strings ignoring case
- if [[ $TRAVIS_BRANCH == "master" ]]; then 
       IMAGE_NAME_SUFFIX="production";
       TAG_PREFIX="v${VERSION_MASTER}.${VERSION_MINOR}"; 
       TAG_SUFFIX="";
       TAG_LATEST=1;
  else 
       TAG_PREFIX="v0.0"; 
       TAG_LATEST=0;
  fi
- if [[ $TRAVIS_BRANCH == "develop" ]]; then IMAGE_NAME_SUFFIX="Staging";TAG_SUFFIX="-Develop"; fi
- if [[ $TRAVIS_BRANCH == "test"    ]]; then IMAGE_NAME_SUFFIX="QA"     ;TAG_SUFFIX="-Test"   ; fi
- if [[ $IMAGE_NAME_SUFFIX == ""    ]]; then IMAGE_NAME_SUFFIX="devtest";TAG_SUFFIX="-devtest"; fi

- TAG="${TAG_PREFIX}.${TRAVIS_BUILD_NUMBER}${TAG_SUFFIX}"
- IMAGE_NAME="${TRAVIS_REPO_SLUG##*/}_${IMAGE_NAME_SUFFIX}"
- IMAGE=us.gcr.io/${GCLOUD_PROJECT_NAME}/${IMAGE_NAME}:${TAG}
- for var in TAG IMAGE_NAME IMAGE TRAVIS_REPO_SLUG GCLOUD_PROJECT_NAME CLOUDSDK_COMPUTE_ZONE CONTAINER_CLUSTER ; do eval echo $var=\$$var; done

- sed -i -e "s^{{.*NEW_STUFF.*}}^$IMAGE $(date)^" server.js

- docker build    -t    ${IMAGE} .
- gcloud docker -- push ${IMAGE} > /dev/null
- gcloud container clusters get-credentials $CONTAINER_CLUSTER --zone $CLOUDSDK_COMPUTE_ZONE

# kept in simple for now ... just update ..
#- kubectl rolling-update ${CONTAINER_NAME} --image=${IMAGE}

- kubectl get rc | grep ${CONTAINER_NAME} 2>/dev/null \ 
      && kubectl rolling-update ${CONTAINER_NAME} --image=${IMAGE} \
      || { \
           sed -e s^{{.*IMAGE.*}}^$IMAGE^ hw-deployment.yaml.TEMPLATE > hw-deployment.yaml ; \
           kubectl create -f hw-deployment.yaml --record
         } \

# TODO: check to see if this image exists before creating it, else update via rolling-update
#     || kubectl run ${CONTAINER_NAME} --image=${IMAGE} --port=8080 \
#     || kubectl set image ${CONTAINER_IMAGE_RESOURCE_TYPE}/${CONTAINER_NAME} ${CONTAINER_APP_LABEL}=${IMAGE} \
#      && kubectl rolling-update ${CONTAINER_NAME} --image=${IMAGE}
# the above could have been done more effectively via a yaml file, but for now above is easier to automate and debug

after_success:
- cal
# Useful resources: https://cloud.google.com/container-registry/
# process: https://www.pivotaltracker.com/blog/experience-report-github-flow-pivotal-web-services/
#  http://softwareengineering.stackexchange.com/questions/255404/how-to-use-github-branches-and-automatic-releases-for-version-management
#  https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables
